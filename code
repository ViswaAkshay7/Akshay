import json

def validate(slots):
    valid_cities = ['mumbai', 'delhi', 'bangalore', 'hyderabad', 'chennai', 'pune', 'nagpur', 'shimla']
    
    if not slots.get('Location'):
        return {
            'isValid': False,
            'violatedSlot': 'Location',
            'message': 'Please provide a valid destination. Valid destinations are: {}.'.format(", ".join(valid_cities))
        }
        
    if slots['Location'].get('value', {}).get('originalValue', '').lower() not in valid_cities:
        return {
            'isValid': False,
            'violatedSlot': 'Location',
            'message': 'We currently support only {} as a valid destination.'.format(", ".join(valid_cities))
        }
        
    if not slots.get('CheckInDate'):
        return {
            'isValid': False,
            'violatedSlot': 'CheckInDate',
            'message': 'Please provide a check-in date.'
        }
        
    if not slots.get('Nights'):
        return {
            'isValid': False,
            'violatedSlot': 'Nights',
            'message': 'Please provide the number of nights for the stay.'
        }
        
    if not slots.get('RoomType'):
        return {
            'isValid': False,
            'violatedSlot': 'RoomType',
            'message': 'Please specify the type of room you want.'
        }

    return {'isValid': True}

def lambda_handler(event, context):
    slots = event['sessionState']['intent']['slots']
    intent = event['sessionState']['intent']['name']
    validation_result = validate(slots)
    
    if event['invocationSource'] == 'DialogCodeHook':
        if not validation_result['isValid']:
            response = {
                "sessionState": {
                    "dialogAction": {
                        'slotToElicit': validation_result['violatedSlot'],
                        "type": "ElicitSlot"
                    },
                    "intent": {
                        'name': intent,
                        'slots': slots
                    }
                },
                "messages": [
                    {
                        "contentType": "PlainText",
                        "content": validation_result['message']
                    }
                ]
            } 
            return response
        else:
            return {
                "sessionState": {
                    "dialogAction": {
                        "type": "Delegate"
                    },
                    "intent": {
                        'name': intent,
                        'slots': slots
                    }
                }
            }
    
    if event['invocationSource'] == 'FulfillmentCodeHook':
        response = {
            "sessionState": {
                "dialogAction": {
                    "type": "Close"
                },
                "intent": {
                    'name': intent,
                    'slots': slots,
                    'state': 'Fulfilled'
                }
            },
            "messages": [
                {
                    "contentType": "PlainText",
                    "content": "Thanks, I have placed your reservation."
                }
            ]
        }
        return response
